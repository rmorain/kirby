# AUTOGENERATED! DO NOT EDIT! File to edit: 01_dataset_builder.ipynb (unless otherwise specified).

__all__ = ['DatasetBuilder']

# Cell
import random
from .database_proxy import WikiDatabase
import json
import importlib
import spacy
import en_core_web_sm
import json

# Cell
class DatasetBuilder():
    "Build a dataset using `get_entities_in_text`"
    def __init__(self):
        self.db = WikiDatabase()
        self.nlp = spacy.load("en_core_web_sm", disable=["tok2vec", "tagger", "parser", "attribute_ruler", "lemmatizer"])

#         module_url = "https://tfhub.dev/google/universal-sentence-encoder/4" #@param ["https://tfhub.dev/google/universal-sentence-encoder/4", "https://tfhub.dev/google/universal-sentence-encoder-large/5"]
#         self.encoder = hub.load(module_url)

    def build(self, ds, dataset_type='random'):
        "Build a database based a given dataset"
        if dataset_type == 'random':
            return ds.map(self.random, batched=False)
        elif dataset_type == 'description':
            return ds.map(self.description, batched=False)
        elif dataset_type == 'relevant':
            pass

    def build_csv(self, ds, split):
        ds = ds.map(self.retrieve_knowledge, batched=False)
        ds.save_to_disk('data/augmented_datasets/')

    def retrieve_knowledge(self, sequence):
        text = sequence['text']
        entities = self.get_entities_in_text(text)
        knowledge = self.add_associations(entities)
        sequence['knowledge'] = knowledge
        return sequence

    def add_associations(self, entities):
        "Returns list of entity/association dictionaries"
        associations = []
        for e in entities:
            a = self.get_entity_associations(e)
            k = {e[1]: a}
            associations.append(k)
        return associations

    def _get_json(self, item):
        """Return JSON version of list object"""
        d = {"label": None, "description": None}
        d['label'] = item[1]
        d['description'] = item[2]
        return json.dumps(d)

    def get_entities_in_text(self, text):
        "Returns entities found in the sentence `text`"
        doc = self.nlp(text)
        entities = []
        spacy_entities = doc.ents
        for entity in spacy_entities:
            entity = self.db.get_entity_by_label(entity.text)
            if entity:
                entities.append(entity)
        return entities

    def get_entity_associations(self, entity):
        """
        Given an `entity_id` return a dictionary containing all the associated properties.
        """
        entity_id = entity[0]
        entity_associations_dict = {'id':entity_id, 'description':entity[2]}
        # Remove all None values from list
        associations = self.db.get_entity_associations(entity_id)
        if not associations:
            return None
        for property_id, related_entity_id in associations:
            property_name, related_entity_label = self.db.get_property_string(property_id, related_entity_id)
            entity_associations_dict[property_name] = related_entity_label
        return entity_associations_dict